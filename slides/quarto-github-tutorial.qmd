---
title: "Mini curso: *Quarto* y *GitHub Pages*"
subtitle: |
  <table style="width:100%;">
    <tr>
      <td style="text-align: left;">
        III Jornadas de Ingeniería Estadística 2024 </br> 
        11 y 12 de Noviembre 2024, Auditorio DMCC </br> 
        Universidad de Santiago de Chile
      </td>
      <td style="text-align: right; vertical-align: top;">
        <img src="images/JIE_logo.png" alt="Logo JIE" style="height: 100px;">
      </td>
    </tr>
  </table>
lang: es
format: 
  clean-revealjs:
    self-contained: true
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Francisco Plaza Vega
    email: francisco.plaza.v@usach.cl
    affiliations: USACH
bibliography: refs.bib
---

# Introducción {background-color="#212f4b"}

## ¿Qué es la Investigación Reproducible?

::: {.callout-note appearance="simple" icon=false}
Es la práctica de conducir estudios científicos o basados en datos de tal manera que **permita a otros replicar o reproducir los resultados usando los mismos datos, códigos y metodologías**.
:::

![](images/reproducibility.jpg){width=70% fig-align="center"}


## Etapas de una Investigación Reproducible

![](images/research-cycle.png){width=70% fig-align="center"}

## Ciencia Abierta

![](images/evolution-open-research.png){width=60% fig-align="center"}

## Espectro de Reproducibilidad

![](images/Reproducible.png){width=60% fig-align="center"}


# Qué necesitaremos? {background-color="#212f4b"}

## Repositorio

:::{.callout-tip title="Enlaces importantes"}
- Sitio web del Mini Curso: [https://franplaza.github.io/Quarto-Github/](https://franplaza.github.io/Quarto-Github/)
- Repositorio en GitHub: [https://github.com/FranPlaza/Quarto-Github](https://github.com/FranPlaza/Quarto-Github)
:::

# Sofware necesarios {background-color="#212f4b"}

## R project

![](images/R_logo.svg.png){width=40% fig-align="center"}

[https://cran.dcc.uchile.cl/](https://cran.dcc.uchile.cl/)

## RSudio IDE

![](images/RStudio-Logo-Flat.png){width=60% fig-align="center"}

[https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/)

> Existen otras alternativas más *génericas* como [Visual Studio Code](https://code.visualstudio.com/), un editor de código para múltiples lenguajes. Sin embargo, al no ser un software especializado en R, requiere utilizar extensiones para lograr las funcionalidad que otorga RStudio.

## Quarto

![](images/quarto.png){width=50% fig-align="center"}

[https://quarto.org/docs/get-started/](https://quarto.org/docs/get-started/)

## Git & Github

![](images/git_github.png){width=45% fig-align="center"}

- Cuenta en [GitHub](https://github.com/)

- [Github Desktop](https://desktop.github.com/)


# Quarto {background-color="#212f4b"}

## Rmarkdown & Quarto

![](images/rmarkdown_quarto.png){width="50%" fig-align="center"}

::: box3
El paquete `rmarkdown` provee un marco de escritura para investigaciones cuentitativas, que combina códigos, resultados y texto. Los documento R Markdown son **completamente reproducibles** y permiten generar archivos en distintos formatos: PDF, Word, Presentaciones y más. `Quarto` es la nueva generación de esta herramienta para incluir distintos lenguajes.
:::

## Algunos ejemplos

-   [Galería de ejemplos](https://quarto.org/docs/gallery/)

## Quarto

![](images/quarto2.png){width="70%" fig-align="center"}

Los archivos `Quarto` fueron diseñados para ser usados de tres maneras:

1.  Para comunicar a los tomadores de decisiones, quienes quieren centrarse en las conclusiones, no en el código detrás del análisis.

2.  Para colaborar con otros investigadores, quienes están interesados en las conclusiones y el cómo se llego a ellas (i.e. el código)

3.  Como un ambiente para hacer análisis, como un *notebook* donde se puede capturar el trabajo realizado junto a notas de este.

## Primeros pasos

1.  Entrar a [Quarto.org](https://quarto.org/docs/get-started/)
2.  Descargar `Quarto` para tu sistema operativo
3.  Ingresar a `RStudio` y crear documento `.qmd`

## Flujo documento Quarto

![](images/rstudio-qmd-how-it-works.png){width="50%" fig-align="center"}

-   `qmd`: archivo de origen
-   `knitr`: Herramienta que interpreta y ejecuta códigos y lo traduce en texto **markdown**
-   `md`: texto escrito en lenguaje **markdown**
-   `pandoc`: Herramienta que convierte archivos `.md` enb distintos formatos

## Anatomía de un documento Quarto

1.  Encabezado en formato `YAML`
2.  Texto en formato `Quarto`
3.  Bloques de código (`R`, `Python`, `Julia`, `Observable`)


## YAML

> YAML es un formato de *serialización* de datos que puede ser leído fácilmente. Su uso es amplio, desde Acciones en GitHub hasta Quarto

Un ejemplo de YAML que difine un **ambiente computacional** podría ser:

```
# Define the operating system as Linux
os: linux

# Use the xenial distribution of Linux
dist: xenial

# Use the programming language Python
language: python

# Use version of Python 3.2
python: 3.2

```

::: box3
YAML nos será de particular interés para la creación de documentos y presentaciones reproducibles, utilizando quarto.
:::


## Herramientas

El contenido del documento puede estar escrito utilizando diferentes formatos, entre ellos:

-   `Quarto`
-   `HTML`
-   `LaTeX`
-   `CSS`

## Creación de documento básico

1.  Abrir `RStudio`
2.  File \> New File \> Quarto Document
3.  Definir características del documento


# Markdown

![](images/Markdown_logo.png){width="10%" fig-align="center"}


## Formato de Texto

+-----------------------------------------+-----------------------------------------+
| Sintáxis Markdown                       | Salida                                  |
+=========================================+=========================================+
| ``` markdown                            | *italics*, **bold**, ***bold italics*** |
| *italics*, **bold**, ***bold italics*** |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+
| ``` markdown                            | superscript^2^ / subscript~2~           |
| superscript^2^ / subscript~2~           |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+
| ``` markdown                            | ~~strikethrough~~                       |
| ~~strikethrough~~                       |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+
| ``` markdown                            | `verbatim code`                         |
| `verbatim code`                         |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+

## Encabezados {#headings}

+-------------------+-----------------------------------+
| Sintáxis Markdown | Salida                            |
+===================+===================================+
| ``` markdown      | # Header 1 {.heading-output}      |
| # Header 1        |                                   |
| ```               |                                   |
+-------------------+-----------------------------------+
| ``` markdown      | ## Header 2 {.heading-output}     |
| ## Header 2       |                                   |
| ```               |                                   |
+-------------------+-----------------------------------+
| ``` markdown      | ### Header 3 {.heading-output}    |
| ### Header 3      |                                   |
| ```               |                                   |
+-------------------+-----------------------------------+
| ``` markdown      | #### Header 4 {.heading-output}   |
| #### Header 4     |                                   |
| ```               |                                   |
+-------------------+-----------------------------------+
| ``` markdown      | ##### Header 5 {.heading-output}  |
| ##### Header 5    |                                   |
| ```               |                                   |
+-------------------+-----------------------------------+
| ``` markdown      | ###### Header 6 {.heading-output} |
| ###### Header 6   |                                   |
| ```               |                                   |
+-------------------+-----------------------------------+

```{=html}
<style type="text/css">
.heading-output {
  border-bottom: none;
  margin-top: 0;
  margin-bottom: 0;
}
</style>
```


## Links e Imágenes {.small}

+----------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------+
| Sintáxis Markdown                                                                            | Salida                                                                                                              |
+==============================================================================================+=====================================================================================================================+
| ```markdown                                                                                  |                                                                                                                     |
| <https://quarto.org>                                                                         | <https://quarto.org>                                                                                                |
| ```                                                                                          |                                                                                                                     |
+----------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------+
| ```markdown                                                                                  | [Quarto](https://quarto.org)                                                                                        |
| [Quarto](https://quarto.org)                                                                 |                                                                                                                     |
| ```                                                                                          |                                                                                                                     |
+----------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------+
| ```markdown                                                                                  | ![Caption](images/JIE_logo.png){width="15%" fig-alt="Logo USM"}                                                     |
| ![Caption](images/JIE_logo.png)                                                              |                                                                                                                     |
| ```                                                                                          |                                                                                                                     |
+----------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------+
| ```markdown                                                                                  | [![Caption](images/JIE_logo.png){width="15%"}](https://quarto.org)                                                  |
| [![Caption](images/JIE_logo.png)](https://quarto.org)                                        |                                                                                                                     |
| ```                                                                                          |                                                                                                                     |
+----------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------+
| ```markdown                                                                                  | [![Caption](images/JIE_logo.png "JIE-2024"){width="15%" fig-alt="JIE-2024"}](https://quarto.org)                    |
| [![Caption](images/JIE_logo.png)](https://quarto.org "JIE-2024")                             |                                                                                                                     |
| ```                                                                                          |                                                                                                                     |
+----------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------+
| ```markdown                                                                                  | [![](images/JIE_logo.png){width="15%" fig-alt="Alt text."}](https://jornadas-estadistica.github.io/)                |
| [![](images/JIE_logo.png){fig-alt="Alt text"}](https://jornadas-estadistica.github.io/)      |                                                                                                                     |
| ```                                                                                          |                                                                                                                     |
+----------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------+



## Listas {.small}

+-----------------------------------+--------------------------------+
| Sintáxis Markdown                 | Salida                         |
+===================================+================================+
| ``` markdown                      | -   Lista no ordenada          |
| * Lista no ordenada               |     -   sub-item 1             |
|     + sub-item 1                  |     -   sub-item 2             |
|     + sub-item 2                  |         -   sub-sub-item 1     |
|         - sub-sub-item 1          |                                |
| ```                               |                                |
+-----------------------------------+--------------------------------+
| ``` markdown                      | -   item 2                     |
| *   item 2                        |                                |
|                                   |     Continuación (4 spaces)    |
|     Continuación (4 spaces)       |                                |
| ```                               |                                |
+-----------------------------------+--------------------------------+
| ``` markdown                      | 1.  Lista ordenada             |
| 1. Lista ordenada                 | 2.  item 2                     |
| 2. item 2                         |     i)  sub-item 1             |
|     i) sub-item 1                 |         A.  sub-sub-item 1     |
|          A.  sub-sub-item 1       |                                |
| ```                               |                                |
+-----------------------------------+--------------------------------+

## Listas {.small}

+-----------------------------------+--------------------------------+
| Sintáxis Markdown                 | Salida                         |
+===================================+================================+
| ``` markdown                      | (1) Una lista cuyos números    |
| (@)  Una lista cuyos números      |                                |
|                                   | continuan después              |
| continuan después                 |                                |
|                                   | (2)  de una interrupción       |
| (@)  de una interrupción          |                                |
| ```                               |                                |
+-----------------------------------+--------------------------------+
| ``` markdown                      | <div>                          |
| ::: {}                            |                                |
| 1. Una lista                      | 1.  Una lista                  |
| :::                               |                                |
|                                   | </div>                         |
| ::: {}                            |                                |
| 1. Seguida de otra lista          | <div>                          |
| :::                               |                                |
| ```                               | 1.  Seguida de otra lista      |
|                                   |                                |
|                                   | </div>                         |
+-----------------------------------+--------------------------------+
| ``` markdown                      | término                        |
| término                           |                                |
| : definición                      | :   definición                 |
| ```                               |                                |
+-----------------------------------+--------------------------------+


## Tablas

#### Sintáxis Markdown

``` markdown
| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |
```

#### Output

| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|    12 | 12   | 12      |   12   |
|   123 | 123  | 123     |  123   |
|     1 | 1    | 1       |   1    |


## Código de fuente

Usamos ```` ``` ```` para delimitar bloques de código:

```` markdown

```
código

```

````

Podemos agregar un lenguaje para destacar el código:

```` markdown

``` python
1 + 1
```

````

**Pandoc** ofrece 140 distintos lenguajes para destacar código.

## Guía de referencia

Para una lista exhaustiva de las opciones de formato que tienen los documentos `.qmd` visitar [https://quarto.org/docs/guide/](https://quarto.org/docs/guide/).

## Formatos de salida: Documentos

Los formatos de salida más utilizados para **documentos** creados con `Quarto` son:

- [`HTML`](https://quarto.org/docs/reference/formats/html.html)
- [`PDF`](https://quarto.org/docs/reference/formats/pdf.html)
- [`DOCX`](https://quarto.org/docs/reference/formats/docx.html)

. . .

Para cambiar entre estos formatos, basta especificiar la salida deseada en el `YAML`. Otros formatos posibles:

- [`OpenOffice`](https://quarto.org/docs/reference/formats/odt.html)
- [`ePub`](https://quarto.org/docs/reference/formats/epub.html)

## Formatos de salida: Presentaciones

En Quarto tenemos 3 opciones para presentaciones:

- [`RevealJS`](https://quarto.org/docs/reference/formats/presentations/revealjs.html)
- [`PowerPoint`](https://quarto.org/docs/reference/formats/presentations/pptx.html)
- [`Beamer`](https://quarto.org/docs/reference/formats/presentations/beamer.html)

En donde `RevealJS` es el formato que nos entrega más herramientas. (Esta presentación fue hecha utilizando `RevealJS` en `Quarto`)

## Caso práctico

::: box3
Crearemos un mismo documento en distintos formatos
:::

[Awesome Quarto](https://github.com/mcanouil/awesome-quarto)

# Templates {background-color="#212f4b"}

## Este tutorial

Este tutorial usa un template llamado clean. Está disponible en un repositorio en [GitHub](https://github.com/grantmcdermott/quarto-revealjs-clean).

# Módulo 2: Control de versiones {background-color="#40666e"}

## Control de versiones

![](images/project-history.svg){width=45% fig-align="center"}

::: {.notes}

No importa cómo esté organizado el grupo de trabajo, siempre se necesitará gestionar algún conjunto de documentos de trabajo compartidos. La gestión de cambios o revisiones a cualquier tipo de información realizada en un archivo o proyecto se llama **control de versiones**

Como lo vimos en el módulo anterior, la reproducibilidad necesita la provisión del código y los datos que se utilizaron para producir, por ejemplo, una figura. En la práctica, los datos y el código se modifican regularmente y es necesario registrar qué se cambió y cuándo, para proporcionar información de procedencia. Como veremos en este capítulo, el control de versiones tiene muchas otras ventajas, lo que explica por qué la mayoría de los proyectos de ciencia de datos se alojan en plataformas Git.

El control de versiones es un enfoque para registrar cambios realizados en un archivo o conjunto de archivos a lo largo del tiempo, de modo que los colaboradores puedan rastrear su historial, revisar cualquier cambio y revertir o volver a versiones anteriores. La gestión de cambios o revisiones a cualquier tipo de información realizada en un archivo o proyecto se llama versionado. Por ejemplo, al escribir un artículo con múltiples colaboradores, el control de versiones puede ayudar a rastrear qué cambios se hicieron, quién los hizo y qué actualizaciones se realizaron.

:::

## Git

:::box1
**Sistema de control de versiones distribuido que se utiliza para el seguimiento de cambios en archivos de desarrollo software.**
:::


![](images/version-control.svg){width=45% fig-align="center"}

::: {.notes}
Muchos de nosostros quizás hemos trabajado en microsoft word usando el famoso **Control de Cambios**.

Los diferentes sistemas de control de versiones pueden utilizarse a través de programas con interfaces gráficas de usuario, aplicaciones basadas en navegadores web o herramientas de línea de comandos. Herramientas como Google Drive y Dropbox ofrecen plataformas para actualizar archivos y compartirlos con otros en tiempo real de manera colaborativa. Sistemas de control de versiones más sofisticados existen dentro de herramientas como **Google Docs** o **HackMD**. Estos permiten a los colaboradores actualizar archivos mientras almacenan cada versión en su historial de versiones (lo discutiremos en detalle). Sistemas avanzados de control de versiones (VCS) como Git, Mercurial y SVN proporcionan herramientas mucho más poderosas. Acceder al historial de versiones y mantener el control sobre la versión principal de tus archivos son características particulares de estas herramientas avanzadas.

Las prácticas de versionado provienen principalmente de la gestión de cambios en los repositorios de código. Sin embargo, en realidad, puedes usar el control de versiones para casi cualquier tipo de archivo en un ordenador. Más adelante en este capítulo, discutiremos el control de versiones para datos y otros archivos de proyectos de investigación, lo cual se puede aplicar para realizar un seguimiento de las revisiones de grandes cantidades de datos. Es útil saber que los datos pueden ser volátiles y versionarlos puede mejorar la reproducibilidad de tus análisis científicos.
:::


## Motivación para utilizar control de versiones

- Es primordial para seguir la procedencia de la información.

- Crea versiones históricas que nos permiten entender que cambios fueron realizados.

- Facilita el manejo de distintas versiones de archivos.

- Permite seguir y combinar cambios realizados por distintas personas.

::: {.notes}

- Debido a que los datos y el código de análisis evolucionan con el tiempo, puede volverse muy difícil o incluso imposible saber qué versión del código y qué versión de los datos se utilizó para producir una figura en particular. Esta información de procedencia se habilita y facilita cuando tanto los datos, el código como los archivos de las figuras están bajo versionado.

- El control de versiones crea un historial de versiones que nos ayuda a entender qué cambios se hicieron, o por qué se realizó un análisis específico, incluso semanas o meses después. Con la ayuda de comentarios y mensajes de commit en Git, por ejemplo, cada versión puede explicar qué cambios contiene en comparación con las versiones anteriores. Esto es útil cuando compartimos nuestro análisis (no solo datos) y lo hacemos auditable o reproducible, lo cual es una buena práctica científica.

- Un sistema de control de versiones oculta ordenadamente las versiones anteriores de los datos. Así, tu directorio de trabajo no está desordenado por los restos de versiones anteriores, mientras que estas siguen siendo accesibles, en caso de que las necesites. De manera similar, con el control de versiones, no hay necesidad de dejar fragmentos de código sin usar por si alguna vez necesitas volver a una versión antigua.

- Finalmente, el control de versiones es invaluable para proyectos colaborativos donde diferentes personas trabajan simultáneamente en los mismos datos o código y construyen sobre el trabajo de los demás. Utilizando un sistema de control de versiones, los cambios realizados por diferentes personas pueden rastrearse y a menudo combinarse automáticamente, ahorrando una gran cantidad de esfuerzos manuales meticulosos. Usar el control de versiones en tu proyecto de investigación significa que tu trabajo es más transparente. Debido a que todas tus acciones están registradas, tus estudios son más fáciles de reproducir y ampliar. Además, los servicios de alojamiento de control de versiones como GitHub, GitLab y otros proporcionan una forma de comunicarse y colaborar de manera más estructurada, como en solicitudes de extracción, revisiones de código y problemas.
:::

## Flujo de trabajo

> El control de versiones es un **enfoque sistemático** para registrar los cambios realizados en un archivo o conjunto de archivos a lo largo del tiempo.

---

Un flujo de trabajo típico para usar control de versiones es:

1. **Crear archivos**
2. **Trabajar sobre estos archivos**
3. **Crear un *snapshot* del estado del archivo** (también llamado versión)
4. **Documentar que cambios fueron realizados en el historial de la versión del archivo**

. . .

![](images/main-branch.png){width=55% fig-align="center"}

## Elementos de Git

- **Repositorio**: Lugar donde se almacenan todos los archivos, carpetas e historial del proyecto.

- **Commit**: Registro de los cambios realizados en los archivos del proyecto en un momento específico.

- **Ramas (o "Branches")**: Espacios de trabajo independientes del desarrollo principal.

- **Fusiones (o "Merges")**: Representa la acción de incorporar los cambios de una Rama (Branch) a otra.

- **Repositorios remotos**: Copias del repositorio almacenadas en un servidor central o en otros equipos.

## Repositorio

:::: {.columns}
:::{.column}
El **Repositorio** de un proyecto corresponde al almacén de datos que contiene todos los archivos, carpetas y el historial de cambios del proyecto. 



:::


::: {.column}
![](images/repositorio.png){width=30% fig-align="center"}
:::

::::

::: box1
Un repositorio de Git puede estar:

- Estar ubicado localmente en la computadora de un desarrollador.

- De forma remota en un servidor. 
:::

::: {.notes}
La principal característica de Git es que cada desarrollador que trabaja en el proyecto tiene una copia completa del repositorio en su máquina local, lo que permite que trabajen de manera independiente y sin conexión continua al servidor central. Esto es lo que se conoce como un sistema de control de versiones distribuido.

El repositorio de Git almacena toda la historia de revisiones o "commits" realizados en el proyecto, lo que permite retroceder en el tiempo y ver cómo ha evolucionado el código. Cada commit contiene información sobre los cambios realizados, quién los hizo y cuándo se realizaron.

Los repositorios de Git facilitan la colaboración en equipos de desarrollo, ya que permiten que varios desarrolladores trabajen en diferentes características o soluciones de errores en paralelo sin interferir entre sí. Luego, estos cambios pueden combinarse o "fusionarse" para crear una versión final del proyecto que incorpore todas las contribuciones.
:::



## Ramas (Branches)

::: box1
Supongamos que quiero agregar o probar algo nuevo en un archivo antes de que se vea reflejado en archivo principal. ¿Cómo puedo mantener un registro de esto?
:::

. . .

![](images/one-branch.png){width=80% fig-align="center"}

. . .

![](images/two-branches.png){width=80% fig-align="center"}

## Sub-ramas (Sub-Branches)

![](images/sub-branch.png){width=80% fig-align="center"}

## ¿Cómo uso Git y Github?

::: box1 
Si deseamos tener una control de versión **LOCAL**, debemos crear un proyecto en RStudio
:::

::: {.notes}

Acá veremos el esquema general del como crear un proyecto para hacer control de versiones.

Esto lo veremos en detalle un poco más adelante con un ejemplo para que ustedes también puedan replicarlo.

:::

## Conectar RStudio con Github

Para guardar nuestras versiones en Github debemos seguir los siguientes pasos:

1. Crear un token de acceso personal (PAT) en Github

```{r}
#| eval: false
library(usethis)
usethis::create_github_token()
```
2. Almacener el token de acceso personal (PAT) 

```{r}
#| eval: false
library(gitcreds)
gitcreds::gitcreds_set()
```

3. Crear repositorio en Github (via web o aplicación de escritorio)

4. Crear nuevo proyecto (Versión de control > Git >  URL del repositorio)

## Push & Pull

![](images/git-push.png){width=80% fig-align="center"}

## Git para proyectos de investigación

![](images/healthy-research-tree.jpg){width=60% fig-align="center"}

- **Versiones para conjuntos de datos, requieren especial cuidado**
- **Estructura de carpetas específician ayudan en el flujo de trabajo**

. . .

:::box2
[Introducción a git](https://learngitbranching.js.org/?locale=es_ES)
:::


::: {.notes}
**Potencial: ** lista de características que un flujo de trabajo con Git/GitHub aporta a los proyectos de ciencia de datos y que serían útiles para proyectos de investigación:

1. Respaldar datos empujándolos a una plataforma Git, hacia un repositorio público o privado.
2. Usar fácilmente diferentes computadoras para trabajar en el mismo proyecto (contigo o con colaboradores).
3. Llevar un registro de contribuciones.
4. Facilitar el uso de plantillas de carpetas para ayudar con la organización de archivos, ver Organización de Datos.
5. Usar herramientas de plataformas Git para la gestión de proyectos.
6. Utilizar plataformas Git para divulgación, incluso cuando el repositorio es privado (usando la Wiki).
7. Crear un sitio web asociado bajo la misma organización en la plataforma Git.

**Problemas**: Git no funciona bien cuando hay muchos datos o cuando los datos son grandes. Cuando se espera que el proyecto sea grande, es necesario establecer una herramienta diferente para evitar crear repositorios poco prácticos. Algunas de estas herramientas dificultan el acceso o la visualización de tus archivos, por lo que es importante planificar con anticipación qué herramienta se adapta mejor a tus necesidades. 

**Interactive_visual_Git**
Uno de los mayores desafíos para comenzar con Git puede ser comprender la estructura de archivos y directorios y la complejidad de las ramas, commits y remotos, y cómo interactúan, particularmente en la línea de comandos con representaciones visuales limitadas. A menudo es confuso, incluso para usuarios avanzados, traducir de un diagrama conceptual a los comandos Git correctos necesarios para lograr los resultados deseados.

La herramienta LearnGitBranching ofrece una introducción interactiva y visual a Git. Esta herramienta interactiva basada en navegador incluye tutoriales y te permite practicar el uso de Git a través de un “repositorio” virtual y un área de pruebas. Al completar los desafíos integrados, familiarizarse con los comandos de Git se convierte más en un juego que en una tarea.

:::

## Estructura de un repositorio

![](images/file-management-manual.jpg){width=60% fig-align="center"}

- [Open Science Framework](https://osf.io/4sdn3/)

 
::: {.notes}
Por ejemplo, Open Science Framework, es una plataforma de código abierto para administración de proyectos de investigación.
:::


## Conectar RStudio y Github

